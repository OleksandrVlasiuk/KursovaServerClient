// <auto-generated />
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using vcn.Entities;

namespace API3.Migrations
{
    [DbContext(typeof(EFContext))]
    [Migration("20191018153907_init db")]
    partial class initdb
    {
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "2.1.8-servicing-32085")
                .HasAnnotation("Relational:MaxIdentifierLength", 128)
                .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

            modelBuilder.Entity("API3.Entities.Message", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<int>("About");

                    b.Property<int>("Friends_Id");

                    b.Property<int>("UserAccount_id");

                    b.HasKey("Id");

                    b.HasIndex("Friends_Id");

                    b.HasIndex("UserAccount_id");

                    b.ToTable("tbl.Messages");
                });

            modelBuilder.Entity("vcn.Entities.Comments", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<int>("FriendsId");

                    b.Property<string>("Info")
                        .IsRequired();

                    b.Property<int>("PostId");

                    b.HasKey("Id");

                    b.HasIndex("FriendsId");

                    b.HasIndex("PostId");

                    b.ToTable("tbl.Comments");
                });

            modelBuilder.Entity("vcn.Entities.Friends", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("Description")
                        .IsRequired();

                    b.Property<string>("Email")
                        .IsRequired();

                    b.Property<string>("Image")
                        .IsRequired();

                    b.Property<string>("Name")
                        .IsRequired();

                    b.Property<int>("PhoneNumber");

                    b.Property<int>("UserAccount_id");

                    b.HasKey("Id");

                    b.HasIndex("UserAccount_id");

                    b.ToTable("Friends");
                });

            modelBuilder.Entity("vcn.Entities.Post", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("File")
                        .IsRequired();

                    b.Property<int>("Friends_id");

                    b.Property<int>("Likes");

                    b.Property<int>("UserAccount_id");

                    b.HasKey("Id");

                    b.HasIndex("Friends_id");

                    b.HasIndex("UserAccount_id");

                    b.ToTable("tbl.Posts");
                });

            modelBuilder.Entity("vcn.Entities.UserAccount", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("Description")
                        .IsRequired();

                    b.Property<string>("Email")
                        .IsRequired();

                    b.Property<string>("Image")
                        .IsRequired();

                    b.Property<string>("Name")
                        .IsRequired();

                    b.Property<int>("PhoneNumber");

                    b.HasKey("Id");

                    b.ToTable("tbl.UsersAccounts");
                });

            modelBuilder.Entity("vcn.Entities.UserLoginning", b =>
                {
                    b.Property<int>("Id");

                    b.Property<string>("Login")
                        .IsRequired();

                    b.Property<string>("Password")
                        .IsRequired();

                    b.HasKey("Id");

                    b.ToTable("tbl.UsersLogIn");
                });

            modelBuilder.Entity("API3.Entities.Message", b =>
                {
                    b.HasOne("vcn.Entities.Friends", "FriendsOf")
                        .WithMany("Messages")
                        .HasForeignKey("Friends_Id")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("vcn.Entities.UserAccount", "UserAccountOf")
                        .WithMany("Messages")
                        .HasForeignKey("UserAccount_id")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("vcn.Entities.Comments", b =>
                {
                    b.HasOne("vcn.Entities.Friends", "FriendsOf")
                        .WithMany("Comments")
                        .HasForeignKey("FriendsId")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("vcn.Entities.Post", "PostOf")
                        .WithMany("Comments")
                        .HasForeignKey("PostId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("vcn.Entities.Friends", b =>
                {
                    b.HasOne("vcn.Entities.UserAccount", "UserAccountOf")
                        .WithMany("Friends")
                        .HasForeignKey("UserAccount_id")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("vcn.Entities.Post", b =>
                {
                    b.HasOne("vcn.Entities.Friends", "FriendsOf")
                        .WithMany("Posts")
                        .HasForeignKey("Friends_id")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("vcn.Entities.UserAccount", "UserAccountOf")
                        .WithMany("Posts")
                        .HasForeignKey("UserAccount_id")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("vcn.Entities.UserLoginning", b =>
                {
                    b.HasOne("vcn.Entities.UserAccount", "UserAccountOf")
                        .WithOne("UserLoginningOf")
                        .HasForeignKey("vcn.Entities.UserLoginning", "Id")
                        .OnDelete(DeleteBehavior.Cascade);
                });
#pragma warning restore 612, 618
        }
    }
}
